The dataset, the evaluation tools and the motion segmentation
program are for scientific use only. Any commercial use of this
package or parts of it is prohibited.
________________________________________________________________

Motion segmentation binary for 64 bit Linux
________________________________________________________________

(c) Thomas Brox 2010

If you use this program, you should cite the following paper:

T. Brox, J. Malik: Object segmentation by long term analysis of 
point trajectories, Proc. European Conference on Computer Vision, 
2010. 

---------------

Usage: 

./motionsegBM bmfFile startFrame numberOfFrames sampling *numberOfObjects 
              *affineMergingFlag

bmfFile is a text file with a very short header, comprising the 
number of images in the sequence and 1. After the header all 
image files of the sequences are listed separated by line breaks. 
See marple2.bmf for an example. All input files must be in the 
PPM format (P6). 

startFrame is the frame where the computation is started. 
Usually this is frame 0. If you want to start later in the 
sequence you may specify another value.

numberOfFrames is the number of frames for which you want to 
run the computation. Make sure that the value is not larger than 
the total number of frames of your sequence.

sampling specifies the subsampling parameter. If you specify 8 (a 
good default value), only every 8th pixel in x and y direction is 
taken into account. If you specify 1, the sampling will be dense 
(be careful, memory consumption and computation time will be very 
large in this setting). 

*numberOfObjects is an optinal parameter that specifies the number of 
objects assumed for the segmentation. If you do not specify this number, 
the number of objects will be determined automatically, as originally 
proposed in the paper. The original option has the value -1.
Note that specifying the number of objects can still result in fewer
clusters, due to empty clusters during the optimization.

*affineMergingFlag is a flag that allows to turn off the affine merging 
post-processing step. Enter 0 to turn this merging off. Default value 
is 1 as originally proposed in the paper. This parameter must be given 
as the 6th argument; specify -1 for *numberOfObjects to use this flag in
conjunction with the automatic model selection.

The output can be found in a subdirectory of the directory where 
the input sequence is stored. It comprises a text file 
TracksNumberOfFrames.dat with all the tracks and their labels. 
For further details how to interpret the text file have a look at
readWriteTracks.cpp. Additionally, the directory contains the 
computed optical flow fields used for tracking (in the Middlebury 
flo format), as well as a visualization of the tracked points 
Tracking???.ppm and their labels Segments???.ppm. 

You can ignore error messages reporting a singular matrix. This
is the normal outcome of a testing procedure. 

Linking problems: 

motionsegBM requires a dynamic library called libg2c.so.0 that
is no longer installed by default on all systems. The current 
package includes libg2c.so.0, so in case of trouble running 
motionsegBM, your system administrator can install it for you 
or you can set the path to this file via 
export LD_LIBRARY_PATH=<Directory>:$LD_LIBRARY_PATH 

_________________________________________________________________

Motion segmentation dataset and evaluation tools for 64 bit Linux
_________________________________________________________________

If you use this dataset, you should cite the following paper:

T. Brox, J. Malik: Object segmentation by long term analysis of 
point trajectories, Proc. European Conference on Computer Vision, 
2010. 

If you publish results on this dataset you agree that you
used exactly the same code and parameters on ALL sequences.

---------------

Usage:

1. To run the Brox-Malik motion segmentation program you first 
have to convert all images into PPM files. You can do this by 
running the script

./conv2ppm

If your program can read jpg images, you can skip this step. 

2. Run your program to generate a text file with the trajectories 
as well as their labels. You can either use the trajectory files 
generated by the provided motion segmentation binary and relabel 
the trajectories or you may use your own tracker. For reading and 
writing the trajectory files, please refer to readWriteTracks.cpp. 

Again: YOU MUST RUN YOUR METHOD ON ALL SEQUENCES USING EXACTLY 
THE SAME CODE AND PARAMETERS. 

You can run the provided motion segmentation binary on the whole 
dataset by calling the script

./runBroxMalikOnDataset

Remark: this script will run approximately 90 hours depending 
on how fast your system is. Most of the time is taken by the 
sequence marple7. You can also run the code manually for each
sequence.

3. For each setting (10, 50, 200, all frames) build a textfile 
that lists the locations of your trajectory files relative to the 
main directory. Refer to allTracksBroxMalik10.txt for an example. 

4. Run the evaluation by calling

./MoSegEvalAll allShots.txt 10|50|200|all yourListOfTrajectoryFiles.txt

You can run the evaluation of the provided motion segmentation 
results by calling the script

./evaluateBroxMalikOnDataset

The evaluation code provides a result file for each sequence and
evaluation length in the directory of your trajectory file. 
Additionally it provides a summary for all sequences in the main
directory. Refer to the paper to learn how to interpret the 
numbers. The evaluation source code is also provided as a 
reference.

__________________________________________________________________

Bugs
__________________________________________________________________

10.2.2012: There has been a typo in the file marple2Def.dat, which
           has been corrected. This does not affect the errors 
           reported by the evaluation tool.

8.2.2011: There has been a minor mistake in the file car4Def.dat, 
          which has been corrected. This affects the errors reported
          by the evaluation tool. The corrected version usually 
          reports smaller errors.   


Please report bugs to brox@informatik.uni-freiburg.de

